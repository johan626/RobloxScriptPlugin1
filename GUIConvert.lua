-- GUI → LocalScript Plugin for Roblox Studio
-- Bahasa: Indonesian
-- Usage: Select a ScreenGui (atau Frame/any GuiObject root) di Explorer, lalu klik toolbar "GUI Tools" -> "Convert GUI to LocalScript".
-- Plugin akan membuat sebuah LocalScript di StarterPlayer > StarterPlayerScripts bernama "GeneratedGui_<NamaGUI>".
-- LocalScript yang dihasilkan akan membuat ulang hirarki GUI dan menyet properti-properti umum.
-- Catatan: Event/Connections, Functions, dan beberapa property khusus tidak diserialisasi.

local Selection = game:GetService("Selection")
local StarterPlayer = game:GetService("StarterPlayer")
local HttpService = game:GetService("HttpService") -- hanya untuk membuat id unik bila perlu

local toolbar = plugin:CreateToolbar("GUI Tools")
local button = toolbar:CreateButton("Convert GUI to LocalScript", "Convert selected GUI into a LocalScript that recreates it", "rbxassetid://4458901886")

-- Daftar properti GUI yang akan di-serialize (umum untuk GuiObject turunan)
local COMMON_PROPERTIES = {
	-- transform / layout
	"Name","AnchorPoint","AutomaticSize","Position","Rotation","Size","Visible","ZIndex","LayoutOrder",
	-- visuals
	"BackgroundColor3","BackgroundTransparency","BorderSizePixel","Image","ImageTransparency","ImageColor3","ScaleType","SliceCenter","SliceScale","ImageRectOffset","ImageRectSize","ClipsDescendants",
	-- text
	"Text","TextColor3","TextSize","TextScaled","Font","TextWrapped","TextXAlignment","TextYAlignment","TextTransparency","TextStrokeTransparency","TextStrokeColor3","PlaceholderText","PlaceholderColor3","TextEditable",
	-- other
	"AutoButtonColor","ResetOnSpawn","Selectable","Modal","Style","StrokeThickness","CornerRadius"
}

local function isGuiObject(inst)
	return inst and inst:IsA("GuiObject")
end

local function quoteString(s)
	return string.format("%q", tostring(s))
end

local function serializeValue(v)
	local t = typeof(v)
	if t == "UDim2" then
		return string.format("UDim2.new(%s,%s,%s,%s)", tostring(v.X.Scale), tostring(v.X.Offset), tostring(v.Y.Scale), tostring(v.Y.Offset))
	elseif t == "UDim" then
		return string.format("UDim.new(%s,%s)", tostring(v.Scale), tostring(v.Offset))
	elseif t == "Vector2" then
		return string.format("Vector2.new(%s,%s)", tostring(v.X), tostring(v.Y))
	elseif t == "Vector3" then
		return string.format("Vector3.new(%s,%s,%s)", tostring(v.X), tostring(v.Y), tostring(v.Z))
	elseif t == "Color3" then
		local r = math.floor(v.R * 255 + 0.5)
		local g = math.floor(v.G * 255 + 0.5)
		local b = math.floor(v.B * 255 + 0.5)
		return string.format("Color3.fromRGB(%d,%d,%d)", r, g, b)
	elseif t == "EnumItem" then
		-- tostring produces "Enum.Class.Item", which works in code
		return tostring(v)
	elseif t == "boolean" then
		return tostring(v)
	elseif t == "number" then
		return tostring(v)
	elseif t == "string" then
		return quoteString(v)
	else
		-- fallback: try to tostring and quote
		return quoteString(tostring(v))
	end
end

-- Cache default instances per class to read default property values
local classDefaults = {}
local function getClassDefaultValue(className, prop)
	if classDefaults[className] == nil then
		local ok, inst = pcall(function() return Instance.new(className) end)
		if ok and inst then
			classDefaults[className] = inst
		else
			classDefaults[className] = false -- mark as non-creatable
		end
	end
	local inst = classDefaults[className]
	if not inst then return nil, false end
	local ok, val = pcall(function() return inst[prop] end)
	if ok then return val, true end
	return nil, false
end

local function valuesEqual(a, b)
	if a == nil and b == nil then return true end
	if a == nil or b == nil then return false end
	local ta = typeof(a)
	local tb = typeof(b)
	if ta ~= tb then return false end
	-- primitive and common userdata types usually support ==
	if ta == "UDim2" or ta == "UDim" or ta == "Vector2" or ta == "Vector3" or ta == "Color3" or ta == "EnumItem" or ta == "boolean" or ta == "number" or ta == "string" then
		return a == b
	end
	-- fallback compare by tostring
	return tostring(a) == tostring(b)
end

local function collectGuiInstances(root)
	local list = {}
	local order = {}
	-- BFS so parents appear before children
	local queue = {root}
	while #queue > 0 do
		local node = table.remove(queue, 1)
		table.insert(list, node)
		for _, child in ipairs(node:GetChildren()) do
			if child:IsA("GuiObject") or child:IsA("ImageLabel") or child:IsA("TextLabel") or child:IsA("TextButton") or child:IsA("Frame") or child:IsA("ScrollingFrame") or child:IsA("ScreenGui") or child:IsA("TextBox") or child:IsA("ImageButton") then
				table.insert(queue, child)
			end
		end
	end
	return list
end

local function generateLuaForGui(root)
	local instances = collectGuiInstances(root)
	local varMap = {}
	local lines = {}

	table.insert(lines, "-- Generated by GUI → LocalScript plugin")
	table.insert(lines, "local Players = game:GetService('Players')")
	table.insert(lines, "local player = Players.LocalPlayer")
	table.insert(lines, "local playerGui = player:WaitForChild('PlayerGui')")
	table.insert(lines, "")

	-- create variables
	for i, inst in ipairs(instances) do
		local varName = "obj" .. i
		varMap[inst] = varName
		table.insert(lines, string.format("local %s = Instance.new(%s)", varName, quoteString(inst.ClassName)))
	end
	table.insert(lines, "")

	-- set properties (only from COMMON_PROPERTIES and Name always)
	for i, inst in ipairs(instances) do
		local varName = varMap[inst]
		-- Always set Name
		table.insert(lines, string.format("%s.Name = %s", varName, quoteString(inst.Name)))
		for _, prop in ipairs(COMMON_PROPERTIES) do
			if prop ~= "Name" then
				-- pcall to safely read property value on the original instance
				local ok, val = pcall(function() return inst[prop] end)
				if ok and val ~= nil then
					-- compare with default value from a fresh instance of the same class
					local defaultVal, hasDefault = getClassDefaultValue(inst.ClassName, prop)
					local sameAsDefault = false
					if hasDefault then
						sameAsDefault = valuesEqual(val, defaultVal)
					end
					if not sameAsDefault then
						-- Serialize (skip Parent)
						if prop ~= "Parent" then
							local success, serialized = pcall(function() return serializeValue(val) end)
							if success and serialized then
								table.insert(lines, string.format("%s.%s = %s", varName, prop, serialized))
							end
						end
					end
				end
			end
		end
		table.insert(lines, "")
	end

	-- set parent relationships; root parent will be playerGui
	for i, inst in ipairs(instances) do
		local varName = varMap[inst]
		local parent = inst.Parent
		if parent == root.Parent then
			-- parent is outside the selected root; in generated script we parent root to playerGui
			if inst == root then
				table.insert(lines, string.format("%s.Parent = playerGui", varName))
			else
				-- if the instance's parent is not part of selection, parent it to the corresponding generated root
				-- Find closest ancestor within selection
				local ancestor = inst.Parent
				while ancestor and not varMap[ancestor] do
					ancestor = ancestor.Parent
				end
				if ancestor and varMap[ancestor] then
					table.insert(lines, string.format("%s.Parent = %s", varName, varMap[ancestor]))
				else
					table.insert(lines, string.format("%s.Parent = playerGui", varName))
				end
			end
		else
			if varMap[parent] then
				table.insert(lines, string.format("%s.Parent = %s", varName, varMap[parent]))
			else
				-- parent not in selection (rare), attach to playerGui
				table.insert(lines, string.format("%s.Parent = playerGui", varName))
			end
		end
	end

	table.insert(lines, "")
	table.insert(lines, "-- End of generated GUI")

	-- combine
	local src = table.concat(lines, "\n")
		return src
end

button.Click:Connect(function()
	local sel = Selection:Get()
	if not sel or #sel == 0 then
		warn("Pilih ScreenGui atau root GuiObject di Explorer sebelum menjalankan plugin.")
		return
	end

	local root = sel[1]
	if not isGuiObject(root) and not root:IsA("ScreenGui") then
		warn("Objek terpilih bukan GuiObject/ScreenGui. Pilih ScreenGui atau Frame/Folder GUI root.")
		return
	end

	local success, generated = pcall(function() return generateLuaForGui(root) end)
	if not success then
		warn("Gagal menghasilkan kode: ", generated)
		return
	end

	-- Create LocalScript in StarterPlayerScripts
	local starterScripts = StarterPlayer:FindFirstChild("StarterPlayerScripts")
	if not starterScripts then
		starterScripts = Instance.new("Folder")
		starterScripts.Name = "StarterPlayerScripts"
		starterScripts.Parent = StarterPlayer
		warn("StarterPlayerScripts belum ada; plugin membuat folder StarterPlayerScripts baru di StarterPlayer.")
	end

	local ls = Instance.new("LocalScript")
	local nameSafe = "GeneratedGui_" .. root.Name:gsub("%W", "_")
	ls.Name = nameSafe
	ls.Source = generated
	ls.Parent = starterScripts

	print("LocalScript '" .. ls.Name .. "' berhasil dibuat di StarterPlayer > StarterPlayerScripts.")
end)

-- End of plugin
